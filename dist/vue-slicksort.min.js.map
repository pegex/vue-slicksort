{"version":3,"file":"vue-slicksort.min.js","sources":["../src/ElementMixin.js","../src/Manager.js","../src/utils.js","../src/ContainerMixin.js","../src/components.js","../src/HandleDirective.js"],"sourcesContent":["// Export Sortable Element Component Mixin\nexport const ElementMixin = {\n  inject: ['manager'],\n  props: {\n    index: {\n      type: Number,\n      required: true,\n    },\n    collection: {\n      type: [String, Number],\n      default: 'default',\n    },\n    disabled: { \n      type: Boolean, \n      default: false,\n    },\n  },\n\n  mounted() {\n    const {collection, disabled, index} = this.$props;\n\n    if (!disabled) {\n      this.setDraggable(collection, index);\n    }\n  },\n\n  watch: {\n    index(newIndex) {\n      if (this.$el && this.$el.sortableInfo) {\n        this.$el.sortableInfo.index = newIndex;\n      }\n    },\n    disabled(isDisabled) {\n      if (isDisabled) {\n        this.removeDraggable(this.collection);\n      } else {\n        this.setDraggable(this.collection, this.index);\n      }\n    },\n    collection(newCollection, oldCollection) {\n      this.removeDraggable(oldCollection);\n      this.setDraggable(newCollection, this.index);\n    },\n  },\n\n  beforeDestroy() {\n    const {collection, disabled} = this;\n\n    if (!disabled) this.removeDraggable(collection);\n  },\n  methods: {\n    setDraggable(collection, index) {\n      const node = this.$el;\n  \n      node.sortableInfo = {\n        index,\n        collection,\n        manager: this.manager,\n      };\n  \n      this.ref = {node};\n      this.manager.add(collection, this.ref);\n    },\n  \n    removeDraggable(collection) {\n      this.manager.remove(collection, this.ref);\n    },\n  },\n};\n","export default class Manager {\n  constructor() {\n    this.refs = {};\n  }\n\n  add(collection, ref) {\n    if (!this.refs[collection]) {\n      this.refs[collection] = [];\n    }\n\n    this.refs[collection].push(ref);\n  }\n\n  remove(collection, ref) {\n    const index = this.getIndex(collection, ref);\n\n    if (index !== -1) {\n      this.refs[collection].splice(index, 1);\n    }\n  }\n\n  isActive() {\n    return this.active;\n  }\n\n  getActive() {\n    return this.refs[this.active.collection].find(({node}) => node.sortableInfo.index == this.active.index);\n  }\n\n  getIndex(collection, ref) {\n    return this.refs[collection].indexOf(ref);\n  }\n\n  getOrderedRefs(collection = this.active.collection) {\n    return this.refs[collection].sort((a, b) => {\n      return a.node.sortableInfo.index - b.node.sortableInfo.index;\n    });\n  }\n}\n","export function arrayMove(arr, previousIndex, newIndex) {\n  const array = arr.slice(0);\n  if (newIndex >= array.length) {\n    let k = newIndex - array.length;\n    while (k-- + 1) {\n      array.push(undefined);\n    }\n  }\n  array.splice(newIndex, 0, array.splice(previousIndex, 1)[0]);\n  return array;\n}\n\nexport const events = {\n  start: ['touchstart', 'mousedown'],\n  move: ['touchmove', 'mousemove'],\n  end: ['touchend', 'touchcancel', 'mouseup'],\n};\n\nexport const vendorPrefix = (function() {\n  if (typeof window === 'undefined' || typeof document === 'undefined') return ''; // server environment\n  // fix for:\n  //    https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  //    window.getComputedStyle() returns null inside an iframe with display: none\n  // in this case return an array with a fake mozilla style in it.\n  const styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];\n  const pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o']))[1];\n\n  switch (pre) {\n    case 'ms':\n      return 'ms';\n    default:\n      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';\n  }\n})();\n\nexport function closest(el, fn) {\n  while (el) {\n    if (fn(el)) return el;\n    el = el.parentNode;\n  }\n}\n\nexport function limit(min, max, value) {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nfunction getCSSPixelValue(stringValue) {\n  if (stringValue.substr(-2) === 'px') {\n    return parseFloat(stringValue);\n  }\n  return 0;\n}\n\nexport function getElementMargin(element) {\n  const style = window.getComputedStyle(element);\n\n  return {\n    top: getCSSPixelValue(style.marginTop),\n    right: getCSSPixelValue(style.marginRight),\n    bottom: getCSSPixelValue(style.marginBottom),\n    left: getCSSPixelValue(style.marginLeft),\n  };\n}\n","import ScrollParent from 'scrollparent';\nimport Manager from './Manager';\nimport {\n  closest,\n  events,\n  vendorPrefix,\n  limit,\n  getElementMargin,\n  arrayMove,\n} from './utils';\n\n// Export Sortable Container Component Mixin\nexport const ContainerMixin = {\n  data() {\n    return {\n      sorting: false,\n      sortingIndex: null,\n      manager: new Manager(),\n      events: {\n        start: this.handleStart,\n        move: this.handleMove,\n        end: this.handleEnd,\n      },\n    };\n  },\n\n  props: {\n    value:                      { type: Array,   required: true },\n    axis:                       { type: String,  default: 'y' }, // 'x', 'y', 'xy'\n    distance:                   { type: Number,  default: 0 },\n    pressDelay:                 { type: Number,  default: 0 },\n    pressThreshold:             { type: Number,  default: 5 },\n    useDragHandle:              { type: Boolean, default: false },\n    useWindowAsScrollContainer: { type: Boolean, default: false },\n    hideSortableGhost:          { type: Boolean, default: true },\n    appendHelperToContainer:    { type: Boolean, default: false },\n    lockToContainerEdges:       { type: Boolean, default: false },\n    lockOffset:                 { type: [String, Number, Array], default: '50%' },\n    transitionDuration:         { type: Number,  default: 300 },\n    lockAxis: String,\n    helperClass: String,\n    contentWindow: Object,\n    shouldCancelStart: { \n      type: Function, \n      default: (e) => {\n        // Cancel sorting if the event target is an `input`, `textarea`, `select` or `option`\n        const disabledElements = ['input', 'textarea', 'select', 'option', 'button'];\n        return disabledElements.indexOf(e.target.tagName.toLowerCase()) !== -1;\n      },\n    },\n    getHelperDimensions: { \n      type: Function,\n      default: ({node}) => ({\n        width: node.offsetWidth,\n        height: node.offsetHeight,\n      }),\n    },\n  },\n\n  provide() {\n    return {\n      manager: this.manager,\n    };\n  },\n\n  mounted() {\n    const scrollParent = ScrollParent(this.$el);\n    this.container = this.$el;\n    this.document = this.container.ownerDocument || document;\n    this._window = this.contentWindow || window;\n    this.scrollContainer = this.useWindowAsScrollContainer\n      ? this.document.body\n      : scrollParent;\n\n    for (const key in this.events) {\n      if (this.events.hasOwnProperty(key)) {\n        events[key].forEach(eventName =>\n          this.container.addEventListener(eventName, this.events[key], false)\n        );\n      }\n    }\n  },\n\n  beforeDestroy() {\n    for (const key in this.events) {\n      if (this.events.hasOwnProperty(key)) {\n        events[key].forEach(eventName =>\n          this.container.removeEventListener(eventName, this.events[key])\n        );\n      }\n    }\n  },\n\n  methods: {\n\n    handleStart(e) {\n      const {distance, shouldCancelStart} = this.$props;\n\n      if (e.button === 2 || shouldCancelStart(e)) {\n        return false;\n      }\n\n      this._touched = true;\n      this._pos = {\n        x: e.pageX,\n        y: e.pageY,\n      };\n\n      const node = closest(e.target, el => el.sortableInfo != null);\n\n      if (\n        node &&\n        node.sortableInfo &&\n        this.nodeIsChild(node) &&\n        !this.sorting\n      ) {\n        const {useDragHandle} = this.$props;\n        const {index, collection} = node.sortableInfo;\n\n        if (\n          useDragHandle && !closest(e.target, el => el.sortableHandle != null)\n        )\n          return;\n\n        this.manager.active = {index, collection};\n\n        /*\n\t\t\t\t * Fixes a bug in Firefox where the :active state of anchor tags\n\t\t\t\t * prevent subsequent 'mousemove' events from being fired\n\t\t\t\t * (see https://github.com/clauderic/react-sortable-hoc/issues/118)\n\t\t\t\t */\n        if (e.target.tagName.toLowerCase() === 'a') {\n          e.preventDefault();\n        }\n\n        if (!distance) {\n          if (this.$props.pressDelay === 0) {\n            this.handlePress(e);\n          } else {\n            this.pressTimer = setTimeout(\n              () => this.handlePress(e),\n              this.$props.pressDelay\n            );\n          }\n        }\n      }\n    },\n\n    nodeIsChild(node) {\n      return node.sortableInfo.manager === this.manager;\n    },\n\n    handleMove(e) {\n      const {distance, pressThreshold} = this.$props;\n\n      if (!this.sorting && this._touched) {\n        this._delta = {\n          x: this._pos.x - e.pageX,\n          y: this._pos.y - e.pageY,\n        };\n        const delta = Math.abs(this._delta.x) + Math.abs(this._delta.y);\n\n        if (!distance && (!pressThreshold || pressThreshold && delta >= pressThreshold)) {\n          clearTimeout(this.cancelTimer);\n          this.cancelTimer = setTimeout(this.cancel, 0);\n        } else if (distance && delta >= distance && this.manager.isActive()) {\n          this.handlePress(e);\n        }\n      }\n    },\n\n    handleEnd() {\n      const {distance} = this.$props;\n\n      this._touched = false;\n\n      if (!distance) {\n        this.cancel();\n      }\n    },\n\n    cancel() {\n      if (!this.sorting) {\n        clearTimeout(this.pressTimer);\n        this.manager.active = null;\n      }\n    },\n\n    handlePress(e) {\n      const active = this.manager.getActive();\n\n      if (active) {\n        const {\n          axis,\n          getHelperDimensions,\n          helperClass,\n          hideSortableGhost,\n          useWindowAsScrollContainer,\n        } = this.$props;\n        const {node, collection} = active;\n        const {index} = node.sortableInfo;\n        const margin = getElementMargin(node);\n\n        const containerBoundingRect = this.container.getBoundingClientRect();\n        const scrollContainerBoundingRect = this.scrollContainer.getBoundingClientRect();\n        const dimensions = getHelperDimensions({index, node, collection});\n\n        this.node = node;\n        this.margin = margin;\n        this.width = dimensions.width;\n        this.height = dimensions.height;\n        this.marginOffset = {\n          x: this.margin.left + this.margin.right,\n          y: Math.max(this.margin.top, this.margin.bottom),\n        };\n        this.boundingClientRect = node.getBoundingClientRect();\n        this.containerBoundingRect = containerBoundingRect;\n        this.index = index;\n        this.newIndex = index;\n\n        this._axis = {\n          x: axis.indexOf('x') >= 0,\n          y: axis.indexOf('y') >= 0,\n        };\n        this.offsetEdge = this.getEdgeOffset(node);\n        this.initialOffset = this.getOffset(e);\n        this.initialScroll = {\n          top: this.scrollContainer.scrollTop,\n          left: this.scrollContainer.scrollLeft,\n        };\n\n        this.initialWindowScroll = {\n          top: window.pageYOffset,\n          left: window.pageXOffset,\n        };\n\n        const fields = node.querySelectorAll('input, textarea, select');\n        const clonedNode = node.cloneNode(true);\n        const clonedFields = [\n          ...clonedNode.querySelectorAll('input, textarea, select'),\n        ]; // Convert NodeList to Array\n\n        clonedFields.forEach((field, index) => {\n          if (field.type !== 'file' && fields[index]) {\n            field.value = fields[index].value;\n          }\n        });\n\n        if (this.appendHelperToContainer) {\n          this.helper = this.container.appendChild(clonedNode);\n        } else {\n          this.helper = this.document.body.appendChild(clonedNode);\n        }\n\n        this.helper.style.position = 'fixed';\n        this.helper.style.top = `${this.boundingClientRect.top - margin.top}px`;\n        this.helper.style.left = `${this.boundingClientRect.left - margin.left}px`;\n        this.helper.style.width = `${this.width}px`;\n        this.helper.style.height = `${this.height}px`;\n        this.helper.style.boxSizing = 'border-box';\n        this.helper.style.pointerEvents = 'none';\n\n        if (hideSortableGhost) {\n          this.sortableGhost = node;\n          node.style.visibility = 'hidden';\n          node.style.opacity = 0;\n        }\n\n        this.minTranslate = {};\n        this.maxTranslate = {};\n        if (this._axis.x) {\n          this.minTranslate.x = containerBoundingRect.left -\n            this.boundingClientRect.left -\n            this.width / 2;\n          this.maxTranslate.x = (containerBoundingRect.left + containerBoundingRect.width) -\n            this.boundingClientRect.left -\n            this.width / 2;\n          this.minTranslate.scrollx = (useWindowAsScrollContainer\n            ? 0\n            : scrollContainerBoundingRect.left) -\n            this.boundingClientRect.left -\n            this.width / 2;\n          this.maxTranslate.scrollx = (useWindowAsScrollContainer\n            ? this._window.innerWidth\n            : scrollContainerBoundingRect.left + scrollContainerBoundingRect.width) -\n            this.boundingClientRect.left -\n            this.width / 2;\n        }\n        if (this._axis.y) {\n          this.minTranslate.y = containerBoundingRect.top -\n            this.boundingClientRect.top -\n            this.height / 2;\n          this.maxTranslate.y = (containerBoundingRect.top + containerBoundingRect.height) -\n            this.boundingClientRect.top -\n            this.height / 2;\n          this.minTranslate.scrolly = (useWindowAsScrollContainer\n            ? 0\n            : scrollContainerBoundingRect.top) -\n            this.boundingClientRect.top -\n            this.height / 2;\n          this.maxTranslate.scrolly = (useWindowAsScrollContainer\n            ? this._window.innerHeight\n            : scrollContainerBoundingRect.top + scrollContainerBoundingRect.height) -\n            this.boundingClientRect.top -\n            this.height / 2;\n        }\n\n        if (helperClass) {\n          this.helper.classList.add(...helperClass.split(' '));\n        }\n\n        this.listenerNode = e.touches ? node : this._window;\n        events.move.forEach(eventName =>\n          this.listenerNode.addEventListener(\n            eventName,\n            this.handleSortMove,\n            false\n          ));\n        events.end.forEach(eventName =>\n          this.listenerNode.addEventListener(\n            eventName,\n            this.handleSortEnd,\n            false\n          ));\n\n        this.sorting = true;\n        this.sortingIndex = index;\n\n        this.$emit('sort-start', {event: e, node, index, collection});\n      }\n    },\n\n    handleSortMove(e) {\n      e.preventDefault(); // Prevent scrolling on mobile\n\n      this.updatePosition(e);\n      this.animateNodes();\n      this.autoscroll();\n\n      this.$emit('sort-move', { event: e });\n    },\n\n    handleSortEnd(e) {\n      const {collection} = this.manager.active;\n\n      // Remove the event listeners if the node is still in the DOM\n      if (this.listenerNode) {\n        events.move.forEach(eventName =>\n          this.listenerNode.removeEventListener(\n            eventName,\n            this.handleSortMove\n          ));\n        events.end.forEach(eventName =>\n          this.listenerNode.removeEventListener(eventName, this.handleSortEnd));\n      }\n\n      // Remove the helper from the DOM\n      this.helper.parentNode.removeChild(this.helper);\n\n      if (this.hideSortableGhost && this.sortableGhost) {\n        this.sortableGhost.style.visibility = '';\n        this.sortableGhost.style.opacity = '';\n      }\n\n      const nodes = this.manager.refs[collection];\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const node = nodes[i];\n        const el = node.node;\n\n        // Clear the cached offsetTop / offsetLeft value\n        node.edgeOffset = null;\n\n        // Remove the transforms / transitions\n        el.style[`${vendorPrefix}Transform`] = '';\n        el.style[`${vendorPrefix}TransitionDuration`] = '';\n      }\n\n      // Stop autoscroll\n      clearInterval(this.autoscrollInterval);\n      this.autoscrollInterval = null;\n\n      // Update state\n      this.manager.active = null;\n\n      this.sorting = false;\n      this.sortingIndex = null;\n\n      this.$emit('sort-end', {\n        event: e,\n        oldIndex: this.index,\n        newIndex: this.newIndex,\n        collection,\n      });\n      this.$emit('input', arrayMove(this.value, this.index, this.newIndex));\n\n      this._touched = false;\n    },\n\n    getEdgeOffset(node, offset = {top: 0, left: 0}) {\n      // Get the actual offsetTop / offsetLeft value, no matter how deep the node is nested\n      if (node) {\n        const nodeOffset = {\n          top: offset.top + node.offsetTop,\n          left: offset.left + node.offsetLeft,\n        };\n        if (node.parentNode !== this.container) {\n          return this.getEdgeOffset(node.parentNode, nodeOffset);\n        } else {\n          return nodeOffset;\n        }\n      }\n    },\n\n    getOffset(e) {\n      return {\n        x: e.touches ? e.touches[0].pageX : e.pageX,\n        y: e.touches ? e.touches[0].pageY : e.pageY,\n      };\n    },\n\n    getLockPixelOffsets() {\n      let {lockOffset} = this.$props;\n\n      if (!Array.isArray(this.lockOffset)) {\n        lockOffset = [lockOffset, lockOffset];\n      }\n\n      if (lockOffset.length !== 2) {\n        throw new Error(`lockOffset prop of SortableContainer should be a single value or an array of exactly two values. Given ${lockOffset}`);\n      }\n\n      const [minLockOffset, maxLockOffset] = lockOffset;\n\n      return [\n        this.getLockPixelOffset(minLockOffset),\n        this.getLockPixelOffset(maxLockOffset),\n      ];\n    },\n\n    getLockPixelOffset(lockOffset) {\n      let offsetX = lockOffset;\n      let offsetY = lockOffset;\n      let unit = 'px';\n\n      if (typeof lockOffset === 'string') {\n        const match = /^[+-]?\\d*(?:\\.\\d*)?(px|%)$/.exec(lockOffset);\n\n        if (match === null) {\n          throw new Error(`lockOffset value should be a number or a string of a number followed by \"px\" or \"%\". Given ${lockOffset}`);\n        }\n\n        offsetX = (offsetY = parseFloat(lockOffset));\n        unit = match[1];\n      }\n\n      if (!isFinite(offsetX) || !isFinite(offsetY)) {\n        throw new Error(`lockOffset value should be a finite. Given ${lockOffset}`);\n      }\n\n      if (unit === '%') {\n        offsetX = offsetX * this.width / 100;\n        offsetY = offsetY * this.height / 100;\n      }\n\n      return {\n        x: offsetX,\n        y: offsetY,\n      };\n    },\n\n    updatePosition(e) {\n      const {lockAxis, lockToContainerEdges} = this.$props;\n\n      const offset = this.getOffset(e);\n      const translate = {\n        x: offset.x - this.initialOffset.x,\n        y: offset.y - this.initialOffset.y,\n      };\n      // Adjust for window scroll\n      translate.y -= (window.pageYOffset - this.initialWindowScroll.top);\n      translate.x -= (window.pageXOffset - this.initialWindowScroll.left);\n\n      this.translate = translate;\n\n      if (lockToContainerEdges) {\n        const [minLockOffset, maxLockOffset] = this.getLockPixelOffsets();\n        const minOffset = {\n          x: this.width / 2 - minLockOffset.x,\n          y: this.height / 2 - minLockOffset.y,\n        };\n        const maxOffset = {\n          x: this.width / 2 - maxLockOffset.x,\n          y: this.height / 2 - maxLockOffset.y,\n        };\n\n        translate.x = limit(\n          this.minTranslate.x + minOffset.x,\n          this.maxTranslate.x - maxOffset.x,\n          translate.x\n        );\n        translate.y = limit(\n          this.minTranslate.y + minOffset.y,\n          this.maxTranslate.y - maxOffset.y,\n          translate.y\n        );\n      }\n\n      if (lockAxis === 'x') {\n        translate.y = 0;\n      } else if (lockAxis === 'y') {\n        translate.x = 0;\n      }\n\n      this.helper.style[\n        `${vendorPrefix}Transform`\n      ] = `translate3d(${translate.x}px,${translate.y}px, 0)`;\n    },\n\n    animateNodes() {\n      const {transitionDuration, hideSortableGhost} = this.$props;\n      const nodes = this.manager.getOrderedRefs();\n      const deltaScroll = {\n        left: this.scrollContainer.scrollLeft - this.initialScroll.left,\n        top: this.scrollContainer.scrollTop - this.initialScroll.top,\n      };\n      const sortingOffset = {\n        left: this.offsetEdge.left + this.translate.x + deltaScroll.left,\n        top: this.offsetEdge.top + this.translate.y + deltaScroll.top,\n      };\n      const scrollDifference = {\n        top: (window.pageYOffset - this.initialWindowScroll.top),\n        left: (window.pageXOffset - this.initialWindowScroll.left),\n      };\n      this.newIndex = null;\n\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const {node} = nodes[i];\n        const index = node.sortableInfo.index;\n        const width = node.offsetWidth;\n        const height = node.offsetHeight;\n        const offset = {\n          width: this.width > width ? width / 2 : this.width / 2,\n          height: this.height > height ? height / 2 : this.height / 2,\n        };\n\n        const translate = {\n          x: 0,\n          y: 0,\n        };\n        let {edgeOffset} = nodes[i];\n\n        // If we haven't cached the node's offsetTop / offsetLeft value\n        if (!edgeOffset) {\n          nodes[i].edgeOffset = (edgeOffset = this.getEdgeOffset(node));\n        }\n\n        // Get a reference to the next and previous node\n        const nextNode = i < nodes.length - 1 && nodes[i + 1];\n        const prevNode = i > 0 && nodes[i - 1];\n\n        // Also cache the next node's edge offset if needed.\n        // We need this for calculating the animation in a grid setup\n        if (nextNode && !nextNode.edgeOffset) {\n          nextNode.edgeOffset = this.getEdgeOffset(nextNode.node);\n        }\n\n        // If the node is the one we're currently animating, skip it\n        if (index === this.index) {\n          if (hideSortableGhost) {\n            /*\n\t\t\t\t\t\t * With windowing libraries such as `react-virtualized`, the sortableGhost\n\t\t\t\t\t\t * node may change while scrolling down and then back up (or vice-versa),\n\t\t\t\t\t\t * so we need to update the reference to the new node just to be safe.\n\t\t\t\t\t\t */\n            this.sortableGhost = node;\n            node.style.visibility = 'hidden';\n            node.style.opacity = 0;\n          }\n          continue;\n        }\n\n        if (transitionDuration) {\n          node.style[\n            `${vendorPrefix}TransitionDuration`\n          ] = `${transitionDuration}ms`;\n        }\n\n        if (this._axis.x) {\n          if (this._axis.y) {\n            // Calculations for a grid setup\n            if (\n              index < this.index &&\n              (\n                ((sortingOffset.left + scrollDifference.left) - offset.width <= edgeOffset.left &&\n                (sortingOffset.top + scrollDifference.top) <= edgeOffset.top + offset.height) ||\n                (sortingOffset.top + scrollDifference.top) + offset.height <= edgeOffset.top\n              )\n            ) {\n              // If the current node is to the left on the same row, or above the node that's being dragged\n              // then move it to the right\n              translate.x = this.width + this.marginOffset.x;\n              if (\n                edgeOffset.left + translate.x >\n                this.containerBoundingRect.width - offset.width\n              ) {\n                // If it moves passed the right bounds, then animate it to the first position of the next row.\n                // We just use the offset of the next node to calculate where to move, because that node's original position\n                // is exactly where we want to go\n                translate.x = nextNode.edgeOffset.left - edgeOffset.left;\n                translate.y = nextNode.edgeOffset.top - edgeOffset.top;\n              }\n              if (this.newIndex === null) {\n                this.newIndex = index;\n              }\n            } else if (\n              index > this.index &&\n              (\n                ((sortingOffset.left + scrollDifference.left) + offset.width >= edgeOffset.left &&\n                (sortingOffset.top + scrollDifference.top) + offset.height >= edgeOffset.top) ||\n                (sortingOffset.top + scrollDifference.top) + offset.height >= edgeOffset.top + height\n              )\n            ) {\n              // If the current node is to the right on the same row, or below the node that's being dragged\n              // then move it to the left\n              translate.x = -(this.width + this.marginOffset.x);\n              if (\n                edgeOffset.left + translate.x <\n                this.containerBoundingRect.left + offset.width\n              ) {\n                // If it moves passed the left bounds, then animate it to the last position of the previous row.\n                // We just use the offset of the previous node to calculate where to move, because that node's original position\n                // is exactly where we want to go\n                translate.x = prevNode.edgeOffset.left - edgeOffset.left;\n                translate.y = prevNode.edgeOffset.top - edgeOffset.top;\n              }\n              this.newIndex = index;\n            }\n          } else {\n            if (\n              index > this.index &&\n              (sortingOffset.left + scrollDifference.left) + offset.width >= edgeOffset.left\n            ) {\n              translate.x = -(this.width + this.marginOffset.x);\n              this.newIndex = index;\n            } else if (\n              index < this.index &&\n              (sortingOffset.left + scrollDifference.left) <= edgeOffset.left + offset.width\n            ) {\n              translate.x = this.width + this.marginOffset.x;\n              if (this.newIndex == null) {\n                this.newIndex = index;\n              }\n            }\n          }\n        } else if (this._axis.y) {\n          if (\n            index > this.index &&\n            (sortingOffset.top + scrollDifference.top) + offset.height >= edgeOffset.top\n          ) {\n            translate.y = -(this.height + this.marginOffset.y);\n            this.newIndex = index;\n          } else if (\n            index < this.index &&\n            (sortingOffset.top + scrollDifference.top) <= edgeOffset.top + offset.height\n          ) {\n            translate.y = this.height + this.marginOffset.y;\n            if (this.newIndex == null) {\n              this.newIndex = index;\n            }\n          }\n        }\n        node.style[`${vendorPrefix}Transform`] = `translate3d(${translate.x}px,${translate.y}px,0)`;\n      }\n\n      if (this.newIndex == null) {\n        this.newIndex = this.index;\n      }\n    },\n\n    autoscroll() {\n      const translate = this.translate;\n      const direction = {\n        x: 0,\n        y: 0,\n      };\n      const speed = {\n        x: 1,\n        y: 1,\n      };\n      const acceleration = {\n        x: 10,\n        y: 10,\n      };\n\n      if (translate.y >= this.maxTranslate.scrolly - this.height / 2) {\n        direction.y = 1; // Scroll Down\n        speed.y = acceleration.y * Math.abs((this.maxTranslate.scrolly - this.height / 2 - translate.y) / this.height);\n      } else if (translate.x >= this.maxTranslate.scrollx - this.width / 2) {\n        direction.x = 1; // Scroll Right\n        speed.x = acceleration.x * Math.abs((this.maxTranslate.scrollx - this.width / 2 - translate.x) / this.width);\n      } else if (translate.y <= this.minTranslate.scrolly + this.height / 2) {\n        direction.y = -1; // Scroll Up\n        speed.y = acceleration.y * Math.abs((translate.y - this.height / 2 - this.minTranslate.scrolly) / this.height);\n      } else if (translate.x <= this.minTranslate.scrollx + this.width / 2) {\n        direction.x = -1; // Scroll Left\n        speed.x = acceleration.x * Math.abs((translate.x - this.width / 2 - this.minTranslate.scrollx) / this.width);\n      }\n\n      if (this.autoscrollInterval) {\n        clearInterval(this.autoscrollInterval);\n        this.autoscrollInterval = null;\n        this.isAutoScrolling = false;\n      }\n\n      if (direction.x !== 0 || direction.y !== 0) {\n        this.autoscrollInterval = setInterval(\n          () => {\n            this.isAutoScrolling = true;\n            const offset = {\n              left: 1 * speed.x * direction.x,\n              top: 1 * speed.y * direction.y,\n            };\n            this.scrollContainer.scrollTop += offset.top;\n            this.scrollContainer.scrollLeft += offset.left;\n            this.translate.x += offset.left;\n            this.translate.y += offset.top;\n            this.animateNodes();\n          },\n          5\n        );\n      }\n    },\n  },\n};\n","import { ElementMixin } from './ElementMixin';\nimport { ContainerMixin } from './ContainerMixin';\n\nexport const SlickList = {\n  name: 'slick-list',\n  mixins: [ ContainerMixin ],\n  render (h) {\n    return h('div', this.$slots.default);\n  },\n};\n\nexport const SlickItem = {\n  name: 'slick-item',\n  mixins: [ ElementMixin ],\n  render (h) {\n    return h('div', this.$slots.default);\n  },\n};\n","// Export Sortable Element Handle Directive\nexport const HandleDirective = {\n  bind(el) {\n    el.sortableHandle = true;\n  },\n};\n"],"names":["ElementMixin","Number","String","Boolean","this","$props","collection","disabled","index","setDraggable","newIndex","$el","sortableInfo","isDisabled","removeDraggable","newCollection","oldCollection","node","manager","ref","add","remove","Manager","refs","push","getIndex","splice","active","find","_this","indexOf","sort","a","b","arrayMove","arr","previousIndex","array","slice","length","k","undefined","events","vendorPrefix","window","document","styles","getComputedStyle","documentElement","pre","Array","prototype","call","join","match","OLink","toUpperCase","substr","closest","el","fn","parentNode","limit","min","max","value","getCSSPixelValue","stringValue","parseFloat","ContainerMixin","handleStart","handleMove","handleEnd","type","required","default","Object","Function","e","target","tagName","toLowerCase","offsetWidth","offsetHeight","scrollParent","ScrollParent","container","ownerDocument","_window","contentWindow","scrollContainer","useWindowAsScrollContainer","body","key","hasOwnProperty","forEach","addEventListener","eventName","_this2","removeEventListener","distance","shouldCancelStart","button","_touched","_pos","pageX","pageY","nodeIsChild","sorting","useDragHandle","sortableHandle","preventDefault","pressDelay","handlePress","pressTimer","setTimeout","_this3","pressThreshold","_delta","x","y","delta","Math","abs","isActive","cancelTimer","cancel","element","style","getActive","axis","getHelperDimensions","helperClass","hideSortableGhost","margin","marginTop","marginRight","marginBottom","marginLeft","containerBoundingRect","getBoundingClientRect","scrollContainerBoundingRect","dimensions","width","height","marginOffset","left","right","top","bottom","boundingClientRect","_axis","offsetEdge","getEdgeOffset","initialOffset","getOffset","initialScroll","scrollTop","scrollLeft","initialWindowScroll","pageYOffset","pageXOffset","fields","querySelectorAll","clonedNode","cloneNode","field","appendHelperToContainer","helper","appendChild","position","boxSizing","pointerEvents","sortableGhost","visibility","opacity","minTranslate","maxTranslate","scrollx","innerWidth","scrolly","innerHeight","classList","split","listenerNode","touches","move","_this4","handleSortMove","end","handleSortEnd","sortingIndex","$emit","event","updatePosition","animateNodes","autoscroll","_this5","removeChild","nodes","i","len","edgeOffset","autoscrollInterval","offset","nodeOffset","offsetTop","offsetLeft","lockOffset","isArray","Error","minLockOffset","maxLockOffset","getLockPixelOffset","offsetX","offsetY","unit","exec","isFinite","lockAxis","lockToContainerEdges","translate","getLockPixelOffsets","minOffset","maxOffset","transitionDuration","getOrderedRefs","deltaScroll","sortingOffset","scrollDifference","nextNode","prevNode","direction","speed","acceleration","isAutoScrolling","setInterval","SlickList","h","$slots","SlickItem"],"mappings":"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"}